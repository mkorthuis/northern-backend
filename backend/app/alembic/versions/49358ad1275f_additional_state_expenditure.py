"""Additional State Expenditure

Revision ID: 49358ad1275f
Revises: 745adf234bc3
Create Date: 2024-11-15 09:17:45.678901

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = '49358ad1275f'
down_revision = '745adf234bc3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Rename existing expenditure_state_total table to expenditure_state_rollup
    op.execute("""
        -- Rename table
        ALTER TABLE expenditure_state_total RENAME TO expenditure_state_rollup;
        
        -- Rename constraint
        ALTER TABLE expenditure_state_rollup 
        RENAME CONSTRAINT unique_expenditure_state_total_year TO unique_expenditure_state_rollup_year;
        
        -- Rename index
        ALTER INDEX idx_expenditure_state_total_year RENAME TO idx_expenditure_state_rollup_year;
        
        -- Rename trigger
        DROP TRIGGER IF EXISTS trigger_update_expenditure_state_total_timestamp ON expenditure_state_rollup;
    """)
    
    # Create trigger for the renamed table
    op.execute("""
        CREATE TRIGGER trigger_update_expenditure_state_rollup_timestamp
        BEFORE UPDATE ON expenditure_state_rollup
        FOR EACH ROW EXECUTE FUNCTION update_date_updated_column()
    """)
    
    # Create new expenditure_state_total table similar to revenue_state_total
    op.execute("""
        CREATE TABLE expenditure_state_total (
            id SERIAL PRIMARY KEY,
            expenditure_entry_type_id_fk INTEGER NOT NULL,
            year INTEGER NOT NULL,
            value NUMERIC(15, 2),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_expenditure_entry_type
                FOREIGN KEY (expenditure_entry_type_id_fk)
                REFERENCES expenditure_entry_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_expenditure_state_year_entry
                UNIQUE (expenditure_entry_type_id_fk, year)
        )
    """)
    
    # Create trigger for timestamp updates on the new table
    op.execute("""
        CREATE TRIGGER trigger_update_expenditure_state_total_timestamp
        BEFORE UPDATE ON expenditure_state_total
        FOR EACH ROW EXECUTE FUNCTION update_date_updated_column()
    """)
    
    # Create index for the new table
    op.execute("""
        CREATE INDEX idx_expenditure_state_total_type ON expenditure_state_total(expenditure_entry_type_id_fk)
    """)
    
    # Populate expenditure_state_total with data from existing expenditure records
    op.execute("""
        INSERT INTO expenditure_state_total (expenditure_entry_type_id_fk, year, value)
        SELECT
            eet.id, 
            df.year, 
            SUM(e.value)
        FROM 
            doe_form df
            JOIN expenditure e ON e.doe_form_id_fk = df.id
            JOIN expenditure_entry_type eet ON e.expenditure_entry_type_id_fk = eet.id
            JOIN expenditure_entry_category_type eect ON eet.expenditure_entry_category_type_id_fk = eect.id
            JOIN expenditure_entry_super_category_type eesct ON eect.expenditure_entry_super_category_type_id_fk = eesct.id
        GROUP BY 
            eet.id, df.year
        ORDER BY 
            df.year ASC
    """)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop the new expenditure_state_total table
    op.execute("DROP TABLE IF EXISTS expenditure_state_total CASCADE")
    
    # Rename expenditure_state_rollup back to expenditure_state_total
    op.execute("""
        -- Rename table
        ALTER TABLE expenditure_state_rollup RENAME TO expenditure_state_total;
        
        -- Rename constraint
        ALTER TABLE expenditure_state_total 
        RENAME CONSTRAINT unique_expenditure_state_rollup_year TO unique_expenditure_state_total_year;
        
        -- Rename index
        ALTER INDEX idx_expenditure_state_rollup_year RENAME TO idx_expenditure_state_total_year;
        
        -- Remove old trigger
        DROP TRIGGER IF EXISTS trigger_update_expenditure_state_rollup_timestamp ON expenditure_state_total;
    """)
    
    # Create original trigger back
    op.execute("""
        CREATE TRIGGER trigger_update_expenditure_state_total_timestamp
        BEFORE UPDATE ON expenditure_state_total
        FOR EACH ROW EXECUTE FUNCTION update_date_updated_column()
    """)
    
    # ### end Alembic commands ###
