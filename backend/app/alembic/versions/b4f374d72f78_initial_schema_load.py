"""Initial Schema Load

Revision ID: b4f374d72f78
Revises: 
Create Date: 2024-11-07 17:05:35.351895

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = 'b4f374d72f78'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Enable UUID extension
    op.execute("""
        CREATE EXTENSION IF NOT EXISTS "uuid-ossp"
    """)

    # Create Survey Respondent table
    op.execute("""
        CREATE TABLE survey_respondent (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            email VARCHAR(255) NOT NULL UNIQUE,
            username VARCHAR(100) NOT NULL UNIQUE,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create Survey table
    op.execute("""
        CREATE TABLE survey (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            title VARCHAR(255) NOT NULL,
            description TEXT,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            survey_start TIMESTAMP,
            survey_end TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            created_by UUID NOT NULL REFERENCES survey_respondent(id)
        )
    """)

    # Create Survey Section table
    op.execute("""
        CREATE TABLE survey_section (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            survey_id UUID NOT NULL REFERENCES survey(id) ON DELETE CASCADE,
            title VARCHAR(255) NOT NULL,
            description TEXT,
            order_index INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create Question Type table
    op.execute("""
        CREATE TABLE question_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(50) NOT NULL UNIQUE,
            description TEXT,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Insert common question types
    op.execute("""
        INSERT INTO question_type (name, description) VALUES
        ('text', 'Short text answer'),
        ('textarea', 'Long text answer'),
        ('single_choice', 'Single option from multiple choices'),
        ('multiple_choice', 'Multiple options from choices'),
        ('rating', 'Rating on a scale'),
        ('scale', 'Likert scale or similar'),
        ('date', 'Date input'),
        ('email', 'Email address input'),
        ('number', 'Numeric input'),
        ('file', 'File upload'),
        ('matrix', 'Matrix or grid of options'),
        ('ranking', 'Rank options in order of preference')
    """)

    # Create Question table
    op.execute("""
        CREATE TABLE question (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            survey_id UUID NOT NULL REFERENCES survey(id) ON DELETE CASCADE,
            section_id UUID REFERENCES survey_section(id) ON DELETE SET NULL,
            type_id INTEGER NOT NULL REFERENCES question_type(id),
            title TEXT NOT NULL,
            description TEXT,
            is_required BOOLEAN DEFAULT FALSE,
            order_index INTEGER NOT NULL,
            validation_rules JSONB,
            display_logic JSONB,
            allow_multiple BOOLEAN DEFAULT FALSE,
            max_answers INTEGER,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create Question Option table
    op.execute("""
        CREATE TABLE question_option (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            question_id UUID NOT NULL REFERENCES question(id) ON DELETE CASCADE,
            text TEXT NOT NULL,
            order_index INTEGER NOT NULL,
            is_other_option BOOLEAN DEFAULT FALSE,
            score NUMERIC,
            row_label VARCHAR(255),
            column_label VARCHAR(255),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create Survey Response table
    op.execute("""
        CREATE TABLE survey_response (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            survey_id UUID NOT NULL REFERENCES survey(id),
            respondent_id UUID REFERENCES survey_respondent(id),
            started_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            completed_at TIMESTAMP,
            ip_address VARCHAR(45),
            user_agent TEXT,
            is_complete BOOLEAN DEFAULT FALSE,
            metadata JSONB,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create Answer table
    op.execute("""
        CREATE TABLE answer (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            response_id UUID NOT NULL REFERENCES survey_response(id) ON DELETE CASCADE,
            question_id UUID NOT NULL REFERENCES question(id),
            value TEXT,
            selected_options JSONB,
            file_path VARCHAR(255),
            answered_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create Answer Item table
    op.execute("""
        CREATE TABLE answer_item (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            answer_id UUID NOT NULL REFERENCES answer(id) ON DELETE CASCADE,
            item_index INTEGER NOT NULL,
            value TEXT,
            option_id UUID REFERENCES question_option(id),
            row_identifier VARCHAR(100),
            column_identifier VARCHAR(100),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Create indexes for better performance
    indexes = [
        "CREATE INDEX idx_questions_survey_id ON question(survey_id)",
        "CREATE INDEX idx_question_options_question_id ON question_option(question_id)",
        "CREATE INDEX idx_survey_responses_survey_id ON survey_response(survey_id)",
        "CREATE INDEX idx_answers_response_id ON answer(response_id)",
        "CREATE INDEX idx_answers_question_id ON answer(question_id)",
        "CREATE INDEX idx_answer_items_answer_id ON answer_item(answer_id)",
        "CREATE INDEX idx_survey_sections_survey_id ON survey_section(survey_id)"
    ]

    for index in indexes:
        op.execute(index)

    # Create timestamp function for date_updated columns
    op.execute("""
        CREATE OR REPLACE FUNCTION update_modified_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.date_updated = now();
            RETURN NEW;
        END;
        $$ language 'plpgsql'
    """)

    # Create triggers for date_updated columns
    triggers = [
        "CREATE TRIGGER update_survey_modtime BEFORE UPDATE ON survey FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_survey_respondent_modtime BEFORE UPDATE ON survey_respondent FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_survey_section_modtime BEFORE UPDATE ON survey_section FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_question_type_modtime BEFORE UPDATE ON question_type FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_question_modtime BEFORE UPDATE ON question FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_question_option_modtime BEFORE UPDATE ON question_option FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_survey_response_modtime BEFORE UPDATE ON survey_response FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_answer_modtime BEFORE UPDATE ON answer FOR EACH ROW EXECUTE PROCEDURE update_modified_column()",
        "CREATE TRIGGER update_answer_item_modtime BEFORE UPDATE ON answer_item FOR EACH ROW EXECUTE PROCEDURE update_modified_column()"
    ]

    for trigger in triggers:
        op.execute(trigger)

    # Create example functions
    op.execute("""
        -- Function to get all answers for a specific question across all responses
        CREATE OR REPLACE FUNCTION get_question_answers(question_uuid UUID)
        RETURNS TABLE (
            response_id UUID,
            answer_value TEXT,
            selected_options JSONB,
            answered_at TIMESTAMP
        ) AS $$
        BEGIN
            RETURN QUERY
            SELECT 
                a.response_id,
                a.value,
                a.selected_options,
                a.answered_at
            FROM 
                answer a
            WHERE 
                a.question_id = question_uuid;
        END;
        $$ LANGUAGE plpgsql
    """)

    op.execute("""
        -- Function to get matrix answers for analysis
        CREATE OR REPLACE FUNCTION get_matrix_answers(question_uuid UUID)
        RETURNS TABLE (
            response_id UUID,
            row_id VARCHAR(100),
            column_id VARCHAR(100),
            option_id UUID,
            value TEXT
        ) AS $$
        BEGIN
            RETURN QUERY
            SELECT 
                a.response_id,
                ai.row_identifier,
                ai.column_identifier,
                ai.option_id,
                ai.value
            FROM 
                answer a
            JOIN 
                answer_item ai ON a.id = ai.answer_id
            WHERE 
                a.question_id = question_uuid;
        END;
        $$ LANGUAGE plpgsql
    """)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop functions
    op.execute("DROP FUNCTION IF EXISTS get_matrix_answers(UUID) CASCADE")
    op.execute("DROP FUNCTION IF EXISTS get_question_answers(UUID) CASCADE")
    
    # Drop tables in reverse order to handle dependencies
    tables_to_drop = [
        'answer_item',
        'answer',
        'survey_response',
        'question_option',
        'question',
        'survey_section',
        'survey',
        'survey_respondent',
        'question_type'
    ]

    for table in tables_to_drop:
        op.execute(f"DROP TABLE IF EXISTS {table} CASCADE")

    # Drop the timestamp update function
    op.execute("DROP FUNCTION IF EXISTS update_modified_column() CASCADE")
    
    # Drop extension (optional, might be used by other parts of the system)
    # op.execute("DROP EXTENSION IF EXISTS uuid-ossp")

    # ### end Alembic commands ###
