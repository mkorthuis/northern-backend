"""Initial Schema Load

Revision ID: b4f374d72f78
Revises: 
Create Date: 2024-11-07 17:05:35.351895

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = 'b4f374d72f78'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create base tables
    op.execute("""
        CREATE TYPE admin_type AS ENUM ('ASU', 'BUS', 'SUP', 'SDE', 'PRI')
    """)

    # Create town table first since it will be referenced by sau
    op.execute("""
        CREATE TABLE town (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Now create sau with town_id_fk referencing town
    op.execute("""
        CREATE TABLE sau (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            address1 VARCHAR(255),
            address2 VARCHAR(255),
            town VARCHAR(255),
            state VARCHAR(50),
            zip VARCHAR(10),
            phone VARCHAR(50),
            fax VARCHAR(50),
            webpage VARCHAR(255),
            town_id_fk INTEGER,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_sau_town
                FOREIGN KEY (town_id_fk)
                REFERENCES town(id)
                ON DELETE RESTRICT
        )
    """)

    # Continue with sau_staff and district as before
    op.execute("""
        CREATE TABLE sau_staff (
            id SERIAL PRIMARY KEY,
            sau_id_fk INTEGER NOT NULL,
            first_name VARCHAR(100) NOT NULL,
            last_name VARCHAR(100) NOT NULL,
            title VARCHAR(255),
            admin_type admin_type NOT NULL,
            email VARCHAR(255),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_sau_staff
                FOREIGN KEY (sau_id_fk)
                REFERENCES sau(id)
                ON DELETE CASCADE
        )
    """)

    op.execute("""
        CREATE TABLE district (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            sau_id_fk INTEGER,
            is_public BOOLEAN NOT NULL DEFAULT TRUE,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_sau
                FOREIGN KEY (sau_id_fk)
                REFERENCES sau(id)
                ON DELETE RESTRICT
        )
    """)

    # Create all other base tables (minus town which is now created above)
    tables = [
        """
        CREATE TABLE region (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE school_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE grades (
            id SERIAL PRIMARY KEY,
            name VARCHAR(50) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """
    ]
    
    for table in tables:
        op.execute(table)

    # Create measurement related tables
    op.execute("""
        CREATE TABLE measurement_type_category (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
    """)

    op.execute("""
        CREATE TABLE measurement_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            measurement_type_category_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_measurement_type_category
                FOREIGN KEY (measurement_type_category_id_fk)
                REFERENCES measurement_type_category(id)
                ON DELETE RESTRICT
        )
    """)

    # Create school table (central entity)
    op.execute("""
        CREATE TABLE school (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            sau_id_fk INTEGER,
            district_id_fk INTEGER,
            region_id_fk INTEGER,
            school_type_id_fk INTEGER,
            principal_first_name VARCHAR(100),
            principal_last_name VARCHAR(100),
            address1 VARCHAR(255),
            address2 VARCHAR(255),
            city VARCHAR(255),
            town_id_fk INTEGER,
            state VARCHAR(50),
            zip VARCHAR(20),
            phone VARCHAR(50),
            fax VARCHAR(50),
            email VARCHAR(255),
            county VARCHAR(100),
            webpage VARCHAR(255),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_sau
                FOREIGN KEY (sau_id_fk)
                REFERENCES sau(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_district
                FOREIGN KEY (district_id_fk)
                REFERENCES district(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_region
                FOREIGN KEY (region_id_fk)
                REFERENCES region(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_school_type
                FOREIGN KEY (school_type_id_fk)
                REFERENCES school_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_town
                FOREIGN KEY (town_id_fk)
                REFERENCES town(id)
                ON DELETE RESTRICT
        )
    """)

    # Create cross-reference tables
    xref_tables = [
        """
        CREATE TABLE school_grade_xref (
            id SERIAL PRIMARY KEY,
            school_id_fk INTEGER NOT NULL,
            grade_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_school_grades
                FOREIGN KEY (school_id_fk)
                REFERENCES school(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_grade_schools
                FOREIGN KEY (grade_id_fk)
                REFERENCES grades(id)
                ON DELETE CASCADE,
            CONSTRAINT unique_school_grade
                UNIQUE (school_id_fk, grade_id_fk)
        )
        """,
        """
        CREATE TABLE town_served_xref (
            id SERIAL PRIMARY KEY,
            school_id_fk INTEGER NOT NULL,
            town_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_school_towns
                FOREIGN KEY (school_id_fk)
                REFERENCES school(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_town_schools
                FOREIGN KEY (town_id_fk)
                REFERENCES town(id)
                ON DELETE CASCADE,
            CONSTRAINT unique_school_town
                UNIQUE (school_id_fk, town_id_fk)
        )
        """,
        """
        CREATE TABLE town_district_xref (
            id SERIAL PRIMARY KEY,
            town_id_fk INTEGER NOT NULL,
            district_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_town_districts
                FOREIGN KEY (town_id_fk)
                REFERENCES town(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_district_towns
                FOREIGN KEY (district_id_fk)
                REFERENCES district(id)
                ON DELETE CASCADE,
            CONSTRAINT unique_town_district
                UNIQUE (town_id_fk, district_id_fk)
        )
        """
    ]

    for table in xref_tables:
        op.execute(table)

    # Create measurement and enrollment tables
    op.execute("""
        CREATE TABLE measurement (
            id SERIAL PRIMARY KEY,
            school_id_fk INTEGER,
            district_id_fk INTEGER,
            measurement_type_id_fk INTEGER NOT NULL,
            year INTEGER NOT NULL,
            field NUMERIC(15, 2),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_school_measurement
                FOREIGN KEY (school_id_fk)
                REFERENCES school(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_district_measurement
                FOREIGN KEY (district_id_fk)
                REFERENCES district(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_measurement_type
                FOREIGN KEY (measurement_type_id_fk)
                REFERENCES measurement_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_school_measurement_year
                UNIQUE (school_id_fk, measurement_type_id_fk, year),
            CONSTRAINT unique_district_measurement_year
                UNIQUE (district_id_fk, measurement_type_id_fk, year)
        )
    """)
    
    # Create measurement state target table
    op.execute("""
        CREATE TABLE measurement_state_target (
            id SERIAL PRIMARY KEY,
            measurement_type_id_fk INTEGER NOT NULL,
            year INTEGER NOT NULL,
            field NUMERIC(15, 2),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_measurement_state_target_type
                FOREIGN KEY (measurement_type_id_fk)
                REFERENCES measurement_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_measurement_state_target_year
                UNIQUE (measurement_type_id_fk, year)
        )
    """)

    # Create district grade cross-reference and school enrollment tables
    additional_tables = [
        """
        CREATE TABLE district_grade_xref (
            id SERIAL PRIMARY KEY,
            district_id_fk INTEGER NOT NULL,
            grade_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_district_grades
                FOREIGN KEY (district_id_fk)
                REFERENCES district(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_grade_districts
                FOREIGN KEY (grade_id_fk)
                REFERENCES grades(id)
                ON DELETE CASCADE,
            CONSTRAINT unique_district_grade
                UNIQUE (district_id_fk, grade_id_fk)
        )
        """,
        """
        CREATE TABLE school_enrollment (
            id SERIAL PRIMARY KEY,
            school_id_fk INTEGER NOT NULL,
            grade_id_fk INTEGER NOT NULL,
            year INTEGER NOT NULL,
            enrollment INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_school_enrollment
                FOREIGN KEY (school_id_fk)
                REFERENCES school(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_grade_enrollment
                FOREIGN KEY (grade_id_fk)
                REFERENCES grades(id)
                ON DELETE CASCADE,
            CONSTRAINT unique_school_grade_year
                UNIQUE (school_id_fk, grade_id_fk, year)
        )
        """
    ]

    for table in additional_tables:
        op.execute(table)

    # Create update timestamp function and triggers
    op.execute("""
        CREATE OR REPLACE FUNCTION update_date_updated_column()
        RETURNS TRIGGER AS $$
        BEGIN
           NEW.date_updated = CURRENT_TIMESTAMP;
           RETURN NEW;
        END;
        $$ LANGUAGE 'plpgsql'
    """)

    # Create triggers for all tables
    tables_for_triggers = [
        'sau', 'district', 'region', 'school_type', 'grades', 'town',
        'measurement_type_category', 'measurement_type', 'school',
        'school_grade_xref', 'town_served_xref', 'measurement',
        'measurement_state_target', 'district_grade_xref', 
        'school_enrollment', 'town_district_xref'
    ]

    for table in tables_for_triggers:
        op.execute(f"""
            CREATE TRIGGER trigger_update_{table}_timestamp
            BEFORE UPDATE ON {table}
            FOR EACH ROW EXECUTE FUNCTION update_date_updated_column()
        """)

    # Create indexes
    indexes = [
        "CREATE INDEX idx_school_enrollment_school ON school_enrollment(school_id_fk)",
        "CREATE INDEX idx_school_enrollment_grade ON school_enrollment(grade_id_fk)",
        "CREATE INDEX idx_school_enrollment_year ON school_enrollment(year)",
        "CREATE INDEX idx_school_sau ON school(sau_id_fk)",
        "CREATE INDEX idx_school_district ON school(district_id_fk)",
        "CREATE INDEX idx_school_region ON school(region_id_fk)",
        "CREATE INDEX idx_school_type ON school(school_type_id_fk)",
        "CREATE INDEX idx_measurement_type_category ON measurement_type(measurement_type_category_id_fk)",
        "CREATE INDEX idx_school_grade ON school_grade_xref(school_id_fk, grade_id_fk)",
        "CREATE INDEX idx_town_served ON town_served_xref(school_id_fk, town_id_fk)",
        "CREATE INDEX idx_measurement_school ON measurement(school_id_fk)",
        "CREATE INDEX idx_measurement_type ON measurement(measurement_type_id_fk)",
        "CREATE INDEX idx_measurement_year ON measurement(year)",
        "CREATE INDEX idx_measurement_state_target_type ON measurement_state_target(measurement_type_id_fk)",
        "CREATE INDEX idx_measurement_state_target_year ON measurement_state_target(year)",
        "CREATE INDEX idx_district_sau ON district(sau_id_fk)",
        "CREATE INDEX idx_district_grade ON district_grade_xref(district_id_fk, grade_id_fk)",
        "CREATE INDEX idx_school_town ON school(town_id_fk)",
        "CREATE INDEX idx_town_district ON town_district_xref(town_id_fk, district_id_fk)",
        "CREATE INDEX idx_sau_town ON sau(town_id_fk)"
    ]

    for index in indexes:
        op.execute(index)

    # Create DOE form related tables
    op.execute("""
        CREATE TABLE doe_form (
            id SERIAL PRIMARY KEY,
            district_id_fk INTEGER NOT NULL,
            year INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_doe_form_district
                FOREIGN KEY (district_id_fk)
                REFERENCES district(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_doe_form_district_year
                UNIQUE (district_id_fk, year)
        )
    """)

    # Create balance sheet related tables and their relationships
    balance_tables = [
        """
        CREATE TABLE balance_entry_super_category_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE balance_entry_category_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            balance_entry_super_category_type_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_balance_entry_super_category
                FOREIGN KEY (balance_entry_super_category_type_id_fk)
                REFERENCES balance_entry_super_category_type(id)
                ON DELETE RESTRICT
        )
        """,
        """
        CREATE TABLE balance_entry_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            account_no VARCHAR(50) NOT NULL,
            page VARCHAR(50),
            line VARCHAR(50),
            balance_entry_category_type_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_balance_entry_category
                FOREIGN KEY (balance_entry_category_type_id_fk)
                REFERENCES balance_entry_category_type(id)
                ON DELETE RESTRICT
        )
        """,
        """
        CREATE TABLE balance_fund_type (
            id SERIAL PRIMARY KEY,
            state_id VARCHAR(50) NOT NULL,
            state_name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE balance_sheet (
            id SERIAL PRIMARY KEY,
            doe_form_id_fk INTEGER NOT NULL,
            balance_entry_type_id_fk INTEGER NOT NULL,
            balance_fund_type_id_fk INTEGER NOT NULL,
            value NUMERIC(15,2),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_balance_sheet_doe_form
                FOREIGN KEY (doe_form_id_fk)
                REFERENCES doe_form(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_balance_sheet_entry_type
                FOREIGN KEY (balance_entry_type_id_fk)
                REFERENCES balance_entry_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_balance_sheet_fund_type
                FOREIGN KEY (balance_fund_type_id_fk)
                REFERENCES balance_fund_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_balance_sheet_entry
                UNIQUE (doe_form_id_fk, balance_entry_type_id_fk, balance_fund_type_id_fk)
        )
        """
    ]

    for table in balance_tables:
        op.execute(table)

    # Create revenue related tables
    revenue_tables = [
        """
        CREATE TABLE revenue_entry_super_category_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE revenue_entry_category_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            revenue_entry_super_category_type_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_revenue_entry_super_category
                FOREIGN KEY (revenue_entry_super_category_type_id_fk)
                REFERENCES revenue_entry_super_category_type(id)
                ON DELETE RESTRICT
        )
        """,
        """
        CREATE TABLE revenue_entry_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            account_no VARCHAR(50) NOT NULL,
            page VARCHAR(50),
            line VARCHAR(50),
            revenue_entry_category_type_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_revenue_entry_category
                FOREIGN KEY (revenue_entry_category_type_id_fk)
                REFERENCES revenue_entry_category_type(id)
                ON DELETE RESTRICT
        )
        """,
        """
        CREATE TABLE revenue_fund_type (
            id SERIAL PRIMARY KEY,
            state_id VARCHAR(50) NOT NULL,
            state_name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE revenue (
            id SERIAL PRIMARY KEY,
            doe_form_id_fk INTEGER NOT NULL,
            revenue_entry_type_id_fk INTEGER NOT NULL,
            revenue_fund_type_id_fk INTEGER NOT NULL,
            value NUMERIC(15,2),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_revenue_doe_form
                FOREIGN KEY (doe_form_id_fk)
                REFERENCES doe_form(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_revenue_entry_type
                FOREIGN KEY (revenue_entry_type_id_fk)
                REFERENCES revenue_entry_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_revenue_fund_type
                FOREIGN KEY (revenue_fund_type_id_fk)
                REFERENCES revenue_fund_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_revenue_entry
                UNIQUE (doe_form_id_fk, revenue_entry_type_id_fk, revenue_fund_type_id_fk)
        )
        """
    ]

    for table in revenue_tables:
        op.execute(table)

    # Create expenditure related tables
    expenditure_tables = [
        """
        CREATE TABLE expenditure_entry_super_category_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE expenditure_entry_category_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            expenditure_entry_super_category_type_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_expenditure_entry_super_category
                FOREIGN KEY (expenditure_entry_super_category_type_id_fk)
                REFERENCES expenditure_entry_super_category_type(id)
                ON DELETE RESTRICT
        )
        """,
        """
        CREATE TABLE expenditure_entry_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            account_no VARCHAR(50) NOT NULL,
            page VARCHAR(50),
            line VARCHAR(50),
            expenditure_entry_category_type_id_fk INTEGER NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_expenditure_entry_category
                FOREIGN KEY (expenditure_entry_category_type_id_fk)
                REFERENCES expenditure_entry_category_type(id)
                ON DELETE RESTRICT
        )
        """,
        """
        CREATE TABLE expenditure_fund_type (
            id SERIAL PRIMARY KEY,
            state_id VARCHAR(50) NOT NULL,
            state_name VARCHAR(255) NOT NULL,
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        )
        """,
        """
        CREATE TABLE expenditure (
            id SERIAL PRIMARY KEY,
            doe_form_id_fk INTEGER NOT NULL,
            expenditure_entry_type_id_fk INTEGER NOT NULL,
            expenditure_fund_type_id_fk INTEGER NOT NULL,
            value NUMERIC(15,2),
            date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT fk_expenditure_doe_form
                FOREIGN KEY (doe_form_id_fk)
                REFERENCES doe_form(id)
                ON DELETE CASCADE,
            CONSTRAINT fk_expenditure_entry_type
                FOREIGN KEY (expenditure_entry_type_id_fk)
                REFERENCES expenditure_entry_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT fk_expenditure_fund_type
                FOREIGN KEY (expenditure_fund_type_id_fk)
                REFERENCES expenditure_fund_type(id)
                ON DELETE RESTRICT,
            CONSTRAINT unique_expenditure_entry
                UNIQUE (doe_form_id_fk, expenditure_entry_type_id_fk, expenditure_fund_type_id_fk)
        )
        """
    ]

    for table in expenditure_tables:
        op.execute(table)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop tables in reverse order to handle dependencies
    tables_to_drop = [
        'expenditure',
        'expenditure_fund_type',
        'expenditure_entry_type',
        'expenditure_entry_category_type',
        'expenditure_entry_super_category_type',
        'revenue',
        'revenue_fund_type',
        'revenue_entry_type',
        'revenue_entry_category_type',
        'revenue_entry_super_category_type',
        'balance_sheet',
        'balance_fund_type',
        'balance_entry_type',
        'balance_entry_category_type',
        'balance_entry_super_category_type',
        'doe_form',
        'school_enrollment',
        'district_grade_xref',
        'measurement_state_target',
        'measurement',
        'town_served_xref',
        'school_grade_xref',
        'town_district_xref',
        'school',
        'measurement_type',
        'measurement_type_category',
        'town',
        'grades',
        'school_type',
        'region',
        'district',
        'sau_staff',
        'sau'
    ]

    for table in tables_to_drop:
        op.execute(f"DROP TABLE IF EXISTS {table} CASCADE")

    # Drop the timestamp update function and enum type
    op.execute("DROP FUNCTION IF EXISTS update_date_updated_column() CASCADE")
    op.execute("DROP TYPE IF EXISTS admin_type CASCADE")

    # ### end Alembic commands ###
